struct two_SAT{
	int n;
	vector<vector<int> > adj;
	vector<int> value, val, comp, z;
	two_SAT(int n = 0): n(n), adj(n << 1){ }
	int time = 0;
	int add_var(){
		adj.emplace_back();
		adj.emplace_back();
		return n ++;
	}
	void either(int u, int v){
		u = max(2 * u, -1 - 2 * u);
		v = max(2 * v, -1 - 2 * v);
		adj[u].push_back(v ^ 1);
		adj[v].push_back(u ^ 1);
	}
	void set_value(int u){
		either(u, u);
	}
	void at_most_one(const vector<int> &arr){
		if((int)arr.size() <= 1) return;
		int cur = ~arr[0];
		for(int u = 2; u < (int)arr.size(); ++ u){
			int next = add_var();
			either(cur, ~arr[u]), either(cur, next), either(~arr[u], next);
			cur = ~next;
		}
		either(cur, ~arr[1]);
	}
	int dfs(int u){
		int low = val[u] = ++ time, v;
		z.push_back(u);
		for(auto v: adj[u]) if(!comp[v]) low = min(low, val[v] ?: dfs(v));
		++ time;
		if(low == val[u]) do{
			v = z.back();
			z.pop_back();
			comp[v] = time;
			if(value[v >> 1] == -1) value[v >> 1] = v & 1;
		}while(v != u);
		return val[u] = low;
	}
	bool solve(){
		value.assign(n, -1), val.assign(2 * n, 0), comp = val;
		for(int u = 0; u < n << 1; ++ u) if(!comp[u]) dfs(u);
		for(int u = 0; u < n; ++ u) if(comp[u << 1] == comp[u << 1 ^ 1]) return false;
		return true;
	}
     void print()
    {
        for (int i = 1; i <= n; i++)
        {
            if (comp[i] > comp[i + n])
                printf("1 "); //1
            else
                printf("0 "); //0
        }
    }
}t;