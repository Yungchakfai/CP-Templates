int n;
ll a[405],b[405],c[405],p[405];
ll hungarian(vector<vector<ll>> a) {
    if (a.empty()) return 0ll;
    int n=a.size()+1, m=a[0].size()+1;
    vector<ll> u(n), v(m), p(m), ans(n-1);
    for (int i=1; i<n; ++i) {
        p[0]=i;
        int j0=0;
        vector<ll> dist(m,LLONG_MAX), pre(m,-1);
        vector<bool> done(m+1);
 
        do {
            done[j0]=true;
            int i0=p[j0],j1;
            ll delta=LLONG_MAX;
 
            for (int j=1; j<m; ++j) if (!done[j]) {
                auto cur = a[i0-1][j-1] - u[i0] - v[j];
                if (cur<dist[j]) dist[j]=cur, pre[j]=j0;
                if (dist[j]<delta) delta=dist[j], j1=j;
            }
 
            for (int j=0; j<m; ++j) {
                if (done[j]) u[p[j]]+=delta, v[j]-=delta;
                else dist[j]-=delta;
            }
            j0=j1;
        } while (p[j0]);
 
        while (j0) {
            int j1=pre[j0];
            p[j0]=p[j1], j0=j1;
        }
    }
    for (int j=1; j<m; ++j) if (p[j]) ans[p[j]-1]=j-1;
    ll res=0;
    for (int i=0; i<n-1; ++i) res+=a[i][ans[i]];
    return res;
}
 
int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin>>n;
    for (int i=0; i<n; ++i) cin>>a[i];
    for (int i=0; i<n; ++i) cin>>p[i];
    for (int i=0; i<n; ++i) cin>>b[i];
    for (int i=0; i<n; ++i) cin>>c[i];
 
    vector<vector<ll>> ar;
    for (int i=0; i<n; ++i) {
        vector<ll> temp;
        for (int j=0; j<n; ++j) temp.push_back(0);
        ar.push_back(temp);
    }
 
    for (int i=0; i<n; ++i) {
        for (int j=0; j<n; ++j) {
            for (int k=0; k<n; ++k) {
                if (a[k]<b[i]+c[j]) ar[i][j]-=p[k];
            }
        }
    }
 
    cout<<-hungarian(ar);
}