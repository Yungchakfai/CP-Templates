//BZOJ 1336

#include <bits/stdc++.h>
using namespace std;
const double eps = 1e-12;
const int maxn = 100010;
struct point{
    double x, y;
};
int sgn(double x){
    if(fabs(x)<eps) return 0;
    return x<0?-1:1;
}
double getdis(point a, point b){
    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}
point center;
point get_circle_center(point a, point b, point c)//得到三角形外接圆圆心
{
    point center;
    double a1=b.x-a.x;
    double b1=b.y-a.y;
    double c1=(a1*a1+b1*b1)/2.0;
    double a2=c.x-a.x;
    double b2=c.y-a.y;
    double c2=(a2*a2+b2*b2)/2.0;
    double d=a1*b2-a2*b1;
    center.x=a.x+(c1*b2-c2*b1)/d;
    center.y=a.y+(a1*c2-a2*c1)/d;
    return center;
}
//p表示定点, n表示顶点的个数, c代表最小覆盖圆圆心, r是半径
void min_cover_circle(point *p, int n, point &c, double &r)//找最小覆盖圆(这里没有用全局变量p[], 因为是为了封装一个函数便于调用)
{
    random_shuffle(p, p + n);//随机函数,使用了之后使程序更快点,也可以不用
    c = p[0];
    r = 0;
    for (int i = 1; i < n; i++)
    {
        if (sgn(getdis(p[i], c) - r) > 0)//如果p[i]在当前圆的外面, 那么以当前点为圆心开始找
        {
            c = p[i];//圆心为当前点
            r = 0;//这时候这个圆只包括他自己.所以半径为0
            for (int j = 0; j < i; j++)//找它之前的所有点
            {
                if (sgn(getdis(p[j], c) - r) > 0)//如果之前的点有不满足的, 那么就是以这两点为直径的圆
                {
                    c.x = (p[i].x + p[j].x) / 2.0;
                    c.y = (p[i].y + p[j].y) / 2.0;
                    r = getdis(p[j], c);
                    for (int k = 0; k < j; k++)
                    {
                        if (sgn(getdis(p[k], c) - r) > 0)//找新作出来的圆之前的点是否还有不满足的, 如果不满足一定就是三个点都在圆上了
                        {
                            c = get_circle_center(p[i], p[j], p[k]);
                            r = getdis(p[i], c);
                        }
                    }
                }
            }
        }
    }
}
int n;
point p[maxn];

int main()
    {ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin>>n;
    point c;
    double r;
    for(int i=0; i<n; i++)
        cin>>p[i].x>>p[i].y;
    min_cover_circle(p, n, c, r);
    printf("%.10f\n", r);
    printf("%.10f %.10f\n", c.x, c.y);
    return 0;
}
