#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll,ll> du;
#define INF 1e16
#define mod 1000000007
#define base 13331
const int N = 5000005;
const int MAXN=500005;
const int siz=270;
struct Node{
    // Node information
    ll cnt,l,r,res;
    // initialize
    Node(){cnt=0;}
    // assignment
    Node(ll x){
        cnt=x;}
    // Node's information merging
    Node operator + (const Node &x)const{
		return Node(cnt+x.cnt);
	}
};
vector<ll>v,a(200005,0);
map<ll,ll>mpt;
// range k-th largest
struct PSegT{
	ll rt=0,root[N<<2];// root[i]为i版本的根编号  
	Node val[N<<2];
	int build(int l,int r){
	    int tnt=++rt;
	    if(l==r) {
		    return tnt;
	    }
	    int mid=(l+r)/2;
	    val[tnt].l=build(l,mid);
	    val[tnt].r=build(mid+1,r);
	    return tnt;
    }
	int insert(int p,int l,int r,int k){
	    int tnt=++rt;
	    val[tnt]=val[p];
	    val[tnt].cnt++;
	    if(l==r) {
		    return tnt;
	    }
	    int mid=(l+r)/2;
	    if(mid>=k) val[tnt].l=insert(val[p].l,l,mid,k);
	    else val[tnt].r=insert(val[p].r,mid+1,r,k);
	    return tnt;
    }
	int query(int t1,int t2,int l,int r,int k){ 
	    if(l==r) {
		    return v[l];
	    }
	    int num=val[val[t2].l].cnt-val[val[t1].l].cnt;
	    int mid=(l+r)/2;
	    if(num>=k) return query(val[t1].l,val[t2].l,l,mid,k);
	    else return query(val[t1].r,val[t2].r,mid+1,r,k-num);
    }
}segt;
ll n,m,q;
// ans[i][k]=max(ans[j][k-1]+count(j+1,i)) for all j<i
void solve(){
    cin>>n>>m;
    v.push_back(-1);
    for(int i=1;i<=n;i++){
        cin>>a[i];
        v.push_back(a[i]);
    }
    sort(v.begin(),v.end());
    v.erase(unique(v.begin(),v.end()),v.end());
    segt.root[0]=segt.build(1,v.size()-1);
    for(int i=1;i<v.size();i++)
        mpt[v[i]]=i;
    for(int i=1;i<=n;i++)
        segt.root[i]=segt.insert(segt.root[i-1],1,v.size()-1,mpt[a[i]]);
    for(ll i=1;i<=m;i++){
        int l,r,k;
        cin>>l>>r>>k;
        cout<<segt.query(segt.root[l-1],segt.root[r],1,v.size()-1,k)<<endl;
    }
}
int main(){
    ios::sync_with_stdio(0);
    int t=1;
    //cin>>t;
    while(t--)
        solve();
    return 0;
}