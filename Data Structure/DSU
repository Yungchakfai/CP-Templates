struct DSU {
	vector<int> f, siz, rnk;
	int cc;

	DSU() {}
	DSU(int n) {
		init(n);
	}

	void init(int n) {
		f.resize(n);
		iota(f.begin(), f.end(), 0);
		siz.assign(n, 1);
		rnk.assign(n, 0);
		cc = n;
	}

	int find(int x) {
		while (x != f[x]) {
			x = f[x] = f[f[x]];
		}
		return x;
	}

	bool same(int x, int y) {
		return find(x) == find(y);
	}

	int merge(int x, int y) {
		x = find(x);
		y = find(y);
		if (x == y) return -1;
		--cc;
		if (rnk[x] > rnk[y]) swap(x, y);
		siz[y] += siz[x];
		f[x] = y;
		if (rnk[x] == rnk[y]) rnk[y]++;
		return y;
	}

	int size(int x) {
		return siz[find(x)];
	}
};