struct Node{
    // Node information
    ll sum;
    // initialize
    Node(){sum=0;}
    // assignment
    Node(ll x){
        sum=x;}
    // Node's information merging
    Node operator + (const Node &x)const{
		return Node(sum+x.sum);
	}
};
struct mark{
    ll add,set;
};
struct SegT{
	ll lo[N<<2],hi[N<<2],pre[N];// lo:id the segemt's l,hi:id of the segment's r,pre: initial value, lazy:lazy mark  
    mark lazy[N<<2];
	Node val[N<<2];
	void build(ll x,ll l,ll r){
		lo[x]=l,hi[x]=r;
        lazy[x].add=0,lazy[x].set=-1;
		if(l==r){
			val[x].sum=pre[l];
			return;
		}
		ll mid=(l+r)>>1,a=x<<1;
		build(a,l,mid);
		build(a|1,mid+1,r);
		val[x]=val[a]+val[a|1];
		return;
	}
	void pushdown(ll x){
        // lazy propagation
		ll a=x<<1;
        if(lazy[x].set==-1){
            val[a|1].sum+=lazy[x].add*(hi[a|1]-lo[a|1]+1);
            val[a].sum+=lazy[x].add*(hi[a]-lo[a]+1);
            lazy[a|1].add+=lazy[x].add;
            lazy[a].add+=lazy[x].add;
        }
        else{
            val[a|1].sum=(lazy[x].add+lazy[x].set)*(hi[a|1]-lo[a|1]+1);
            val[a].sum=(lazy[x].add+lazy[x].set)*(hi[a]-lo[a]+1);
            lazy[a|1].add=lazy[a].add=lazy[x].add;
            lazy[a|1].set=lazy[a].set=lazy[x].set;
        }
		lazy[x].add=0,lazy[x].set=-1;
		return;
	}
	void update(ll ty,ll v,ll x,ll l,ll r){
		ll tl=lo[x],tr=hi[x];
		if(l<=tl&&tr<=r){
            if(ty==1)
                val[x].sum+=v*(hi[x]-lo[x]+1);
            if(ty==2)
                val[x].sum=v*(hi[x]-lo[x]+1);
            if(ty==2)
                lazy[x].set=v,lazy[x].add=0;
            else
                lazy[x].add+=v;
			return;
		}
		if(lazy[x].set!=-1||lazy[x].add!=0)
			pushdown(x);
		ll mid=(tl+tr)>>1,a=x<<1;
		if(mid>=l)
			update(ty,v,a,l,r);
		if(mid<r)
			update(ty,v,a|1,l,r);
		val[x]=val[a]+val[a|1];
		return;
	}
	Node query(ll x,ll l,ll r)
	{
		ll tl=lo[x],tr=hi[x];
        if(tr<l||tl>r)
            return Node(0);
		if(l<=tl&&tr<=r)
			return val[x];
		if(lazy[x].set!=-1||lazy[x].add!=0)
			pushdown(x);
		ll mid=(tl+tr)>>1,a=x<<1;
		if(mid<l)
			return query(a|1,l,r);
		if(mid>=r)
			return query(a,l,r);
		return query(a,l,r)+query(a|1,l,r);
	}
}segt;