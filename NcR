using Z=long long;
struct Comb {
	int n;
	std::vector<Z> _fac;
	std::vector<Z> _invfac;
	std::vector<Z> _inv;

	Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}
	Comb(int n) : Comb() {
		init(n);
	}

	void init(int m) {
		if (m <= n) return;
		_fac.resize(m + 1);
		_invfac.resize(m + 1);
		_inv.resize(m + 1);

		for (int i = n + 1; i <= m; i++) {
			_fac[i] = _fac[i - 1] * i%mod;
		}
		_invfac[m] = power(_fac[m],mod-2);
		for (int i = m; i > n; i--) {
			_invfac[i - 1] = _invfac[i] * i%mod;
			_inv[i] = _invfac[i] * _fac[i - 1]%mod;
		}
		n = m;
	}

	Z fac(int m) {
		if (m > n) init(2 * m);
		return _fac[m];
	}
	Z invfac(int m) {
		if (m > n) init(2 * m);
		return _invfac[m];
	}
	Z inv(int m) {
		if (m > n) init(2 * m);
		return _inv[m];
	}
	Z binom(int n, int m) {
		if (n < m || m < 0) return 0;
		return fac(n) * invfac(m)%mod * invfac(n - m)%mod;
	}
	Z catalan(int n) {
		return binom(2 * n, n) * inv(n + 1)%mod;
    }
	Z lucas(int n, int m) {
		if (n % mod < m % mod) return 0;
		if (n < mod) return binom(n, m);
		return 1ll * lucas(n / %mod, m / %mod) * binom(n % P, m % P)%mod;
	}
} comb;